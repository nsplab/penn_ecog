[feature]# Do not delete this line. This is the scope used to access the parameters defined below. INIReader in C++ and configobj in Python are the open source tools used to write and read this config file.

# config file of feature extraction module

# whether collect feature statistice for the baseline
baseline = 0

# how many seconds record baseline signal in seconds
baselineTime = 30

#specify the location of the signalConfig file, which contains parameters related to the signal acquisition module
#use signalConfig = '../signal.cfg' when real data is received by the TDT
#use signalConfig = '../kinect_signal.cfg' when synthetic EEG data is received by the Kinect
#signalConfig = '../imitator_signal.cfg' # when the imitator module is used
signalConfig = ../emg_signal.cfg# when emg with gtech
#signalConfig = '../tdt_signal.cfg' # when emg with gtech
#signalConfig = '../kinect_signal.cfg'

# FFT window size in ms
fftWinSize = 500

# FFT window type can be selected by assigning the fftWinType to one of the following integers between 0 and 3:
# 0: rectangle
# 1: HAMMING
# 2: BLACKMAN_HARRIS
# 3: MULTITAPER

#Here, we use the Blackman Harris window type, just as an example that appears to reduce bleeding from 60 Hz
fftWinType = 0

# output rate from the feature extraction module, which is equal to the number of FFT windows per channel calculated per second
#for example outputRate = 3 is 3 times per second
outputRate = 11

# EMG
freqRangeFrom = 15
freqRangeTo = 30

# EEG
#freqRangeFrom = 8
#freqRangeTo = 12


# gamma
#freqRangeFrom = 72
#freqRangeTo = 92

# linear dim reduction file, delimited using the whitespace character
# this contains a matrix that will be multiplied by the FFT output to reduce dimensionality
# this assumes FFTs from all channels are concatenated into one large column vector, ordered by channel number
#matrixFile = '../matrix.csv'
#matrixFile = '../kinect_matrix.csv'
matrixFile = ../kinect_matrix.csv

#spatialFilterFile = '../spatialFilter_matrix.csv'
#spatialFilterFile = '../eye_60.txt'
#spatialFilterFile = '../eye_4.txt' # for the imitator module
spatialFilterFile = ../eye_3_64.csv# for emg
#spatialFilterFile = '../eye_3_32.csv' # for emg

# number of feature that generated to be passed to the filter
# in the naive filter we assume each feature is mapped to control in one dimension
numFeatureChannels = 3
dataPath = /home/user/code/nsplab/penn_ecog/penn2/data/subject_8_@_05_30_2014
DemoMode = 1
samplingRate = 9600
featureChannels = 1*4*5
featureFrequencies = 15-30*15-30*15-30
numChannels = 64
